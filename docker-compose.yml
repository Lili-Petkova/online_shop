version: "3.8"

services:
  shop:
    container_name: shop
    build:
      context: .
      dockerfile: ./docker/shop/Dockerfile
    volumes:
      - ./shop:/app
    networks:
      - timing
      - entry
      - main_network
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - db_shop
      - redis
    environment:
      DB_NAME: "shop"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_shop"
      DB_PORT: "5432"
      DJANGO_ENV: "dev"
    restart: on-failure
#    command:
#      - sh /runserver.sh

  warehouse:
    container_name: warehouse
    build:
      context: .
      dockerfile: ./docker/warehouse/Dockerfile
    volumes:
      - ./warehouse:/app
    networks:
      - warehouse_db_network
      - timing
      - entry
      - notifications
    expose:
      - 8001
    ports:
      - "8001:8001"
    depends_on:
      - db_warehouse
    environment:
      DB_NAME: "warehouse"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_warehouse"
      DB_PORT: "5432"
    restart: on-failure
#    command:
#      - sh /runserver.sh

  db_shop:
    container_name: db_shop
    image: postgres:14-alpine
    volumes:
      - db_shop:/var/lib/postgresql/data
    networks:
      - main_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shop'

  db_warehouse:
    container_name: db_warehouse
    image: postgres:14-alpine
    volumes:
      - db_warehouse:/var/lib/postgresql/data
    networks:
      - warehouse_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'warehouse'

  nginx:
    container_name: nginx
    build:
      target: development_build
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    restart: on-failure
    networks:
      - entry
    ports:
      - 80:80
      - 8025:8025
      - 5555:5555
    depends_on:
      - warehouse
      - shop
      - mailhog

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: docker/shop/Dockerfile
      args:
        DJANGO_ENV: 'dev'
    networks:
      - timing
      - notifications
      - main_network
    volumes:
      - ./shop:/code
      - ./config:/config
    environment:
      C_FORCE_ROOT: 'true'
      DATABASE_URL: 'postgresql://postgres:postgdb@db_shop:5432/shop'
      DATABASE_HOST: 'db_shop'
      DATABASE_PORT: '5432'
      REDIS_URL: 'redis://redis:6379/0'
      REDIS_CACHE: 'redis:6379'
      AMQP_URL: 'amqp://rabbitmq:5672'
#      WEB_HOST: 'shop'
#      WEB_PORT: '8000'
    depends_on:
      - rabbitmq
      - db_shop
    restart: on-failure
    command: celery -A shop worker -B -l INFO

  redis:
    container_name: redis
    image: bitnami/redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    expose:
      - 6379
    networks:
      - main_network
    volumes:
      - redis:/var/lib/redis/data

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    command: [ "-smtp-bind-addr", "0.0.0.0:25" ]
    user: root
    restart: on-failure
    networks:
      - entry
      - notifications
    expose:
      - 25
      - 8025

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    expose:
      - 4369
      - 5671
      - 5672
      - 15672
      - 25672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - main_network

networks:
  warehouse_db_network:
  timing:
  entry:
  notifications:
  main_network:

volumes:
  db_shop:
  db_warehouse:
  redis:
  rabbitmq_data:
