version: "3.8"

services:
  shop:
    container_name: shop
    build:
      context: .
      dockerfile: ./docker/shop/Dockerfile
    volumes:
      - ./shop:/app
    networks:
      - shop_db_network
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - db_shop
    environment:
      DB_NAME: "shop"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_shop"
      DB_PORT: "5432"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  warehouse:
    container_name: warehouse
    build:
      context: .
      dockerfile: ./docker/warehouse/Dockerfile
    volumes:
      - ./warehouse:/app
    networks:
      - warehouse_db_network
    expose:
      - 8001
    ports:
      - "8001:8001"
    depends_on:
      - db_warehouse
    environment:
      DB_NAME: "warehouse"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_warehouse"
      DB_PORT: "5432"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  db_shop:
    container_name: db_shop
    image: postgres:14-alpine
    volumes:
      - db_shop_volume:/var/lib/postgresql/data
    networks:
      - shop_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shop'

  db_warehouse:
    container_name: db_warehouse
    image: postgres:14-alpine
    volumes:
      - db_warehouse_volume:/var/lib/postgresql/data
    networks:
      - warehouse_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'warehouse'

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    restart: on-failure
    networks:
      - nginx_network
    ports:
      - 80:80
      - 8001:8001
      - 8025:8025
    depends_on:
      - warehouse
      - shop
      - mailhog
    healthcheck:
      test: [ "CMD-SHELL", "ps ax", "|" ,"grep -v grep", "|" ,"grep nginx",  "||", "exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3


  celery:
    container_name: celery
    build:
      context: .
      dockerfile: docker/shop/Dockerfile
      args:
        DJANGO_ENV: 'dev'
    networks:
      - webnet
      - nginx_network
    expose:
      - 8000
    volumes:
      - ./shop:/code
      - ./config:/config
    environment:
      C_FORCE_ROOT: 'true'
      DATABASE_URL: 'postgresql://postgres:postgdb@db:5432/dbshop'
      DATABASE_HOST: 'db'
      DATABASE_PORT: '5432'
      REDIS_URL: 'redis://redis:6379/0'
      REDIS_CACHE: 'redis:6379'
      AMQP_URL: 'amqp://rabbitmq:5672'
      CHECK_WEB: 'true'
      WEB_HOST: 'shop'
      WEB_PORT: '8000'
    depends_on:
      - redis
      - db_shop
    restart: on-failure
    command: celery -A shop worker -B -l INFO

  redis:
    image: bitnami/redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    command: [ "-smtp-bind-addr", "0.0.0.0:25" ]
    user: root
    restart: on-failure
    networks:
      - webnet
      - nginx_network
    expose:
      - 25
      - 8025
    healthcheck:
      test: [ "CMD", "echo", "|", "telnet", "127.0.0.1 25" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

#  postgres:
#    container_name: postgres_container
#    image: postgres
#    environment:
#      POSTGRES_USER: 'admin'
#      POSTGRES_PASSWORD: 'Qwerty54321'
#      POSTGRES_DB: 'post_db'
#      PGDATA: /data/postgres
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres:/data/postgres
#    networks:
#      - postgres
#    restart: on-failure
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: 12345Qwerty
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - warehouse_db_network
    restart: unless-stopped


networks:
  shop_db_network:
  warehouse_db_network:

volumes:
  db_shop_volume:
  db_warehouse_volume:
